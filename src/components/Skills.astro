---
// Componente Skills para mostrar habilidades
const skills = {
  backend: [
    { name: 'PHP', level: 95 },
    { name: 'Laravel', level: 90 },
    { name: 'Node.js', level: 85 },
    { name: 'Symfony', level: 80 },
  ],
  frontend: [
    { name: 'JavaScript', level: 92 },
    { name: 'TypeScript', level: 88 },
    { name: 'Vue.js', level: 85 },
    { name: 'React', level: 82 },
  ],
  frameworks: [
    { name: 'Express.js', level: 88 },
    { name: 'NestJS', level: 85 },
    { name: 'Slim', level: 80 },
  ]
};
---

<section class="py-20 bg-[#0a0a0a]" id="skills">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h2 class="text-4xl font-bold text-center mb-12 text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-500 to-cyan-400 font-['Orbitron']">
      SKILLS
    </h2>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      {/* Backend Skills */}
      <div class="bg-[#1a1a1a] border border-fuchsia-500 rounded-lg p-6 backdrop-blur-sm">
        <h3 class="text-xl font-bold mb-6 text-cyan-400 font-['Orbitron']">Backend</h3>
        <div class="space-y-6">
          {skills.backend.map(skill => (
            <div class="skill-item">
              <div class="flex justify-between mb-2">
                <span class="text-white">{skill.name}</span>
                <span class="text-fuchsia-500">{skill.level}%</span>
              </div>
              <div class="h-2 bg-gray-800 rounded-full overflow-hidden">
                <div 
                  class="h-full bg-gradient-to-r from-fuchsia-500 to-cyan-500 rounded-full transition-all duration-1000 ease-in-out"
                  style={{ width: '0%' }}
                  data-width={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Frontend Skills */}
      <div class="bg-[#1a1a1a] border border-fuchsia-500 rounded-lg p-6 backdrop-blur-sm">
        <h3 class="text-xl font-bold mb-6 text-cyan-400 font-['Orbitron']">Frontend</h3>
        <div class="space-y-6">
          {skills.frontend.map(skill => (
            <div class="skill-item">
              <div class="flex justify-between mb-2">
                <span class="text-white">{skill.name}</span>
                <span class="text-fuchsia-500">{skill.level}%</span>
              </div>
              <div class="h-2 bg-gray-800 rounded-full overflow-hidden">
                <div 
                  class="h-full bg-gradient-to-r from-fuchsia-500 to-cyan-500 rounded-full transition-all duration-1000 ease-in-out"
                  style={{ width: '0%' }}
                  data-width={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Frameworks */}
      <div class="bg-[#1a1a1a] border border-fuchsia-500 rounded-lg p-6 backdrop-blur-sm">
        <h3 class="text-xl font-bold mb-6 text-cyan-400 font-['Orbitron']">Frameworks</h3>
        <div class="space-y-6">
          {skills.frameworks.map(skill => (
            <div class="skill-item">
              <div class="flex justify-between mb-2">
                <span class="text-white">{skill.name}</span>
                <span class="text-fuchsia-500">{skill.level}%</span>
              </div>
              <div class="h-2 bg-gray-800 rounded-full overflow-hidden">
                <div 
                  class="h-full bg-gradient-to-r from-fuchsia-500 to-cyan-500 rounded-full transition-all duration-1000 ease-in-out"
                  style={{ width: '0%' }}
                  data-width={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Animar las barras de habilidades cuando son visibles
  function animateSkills() {
    const skillBars = document.querySelectorAll('.skill-item div[data-width]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const width = entry.target.getAttribute('data-width') + '%';
          entry.target.style.width = width;
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });
    
    skillBars.forEach(bar => {
      observer.observe(bar);
    });
  }
  
  // Iniciar la animación cuando el componente se monte
  document.addEventListener('DOMContentLoaded', () => {
    // Pequeño retraso para asegurar que el DOM esté listo
    setTimeout(animateSkills, 500);
  });
</script>
