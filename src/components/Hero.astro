---
// Componente Hero para la sección principal
const { title = 'Daniel Rivas', subtitle = 'Full Stack Developer' } = Astro.props;
---

<section class="min-h-screen flex items-center justify-center text-center bg-gradient-to-br from-[#0a0a0a] to-[#050505] relative overflow-hidden" id="inicio">
  <div class="relative z-10 px-4">
    <h1 class="text-5xl md:text-6xl lg:text-7xl font-black mb-6 text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-500 to-cyan-400 font-['Orbitron'] tracking-wide">
      {title}
    </h1>
    <div class="text-2xl md:text-3xl text-cyan-400 mb-8 font-mono">
      <span id="typing-text" class="border-r-2 border-fuchsia-500 animate-pulse"></span>
    </div>
    <a href="#skills" class="inline-block px-8 py-3 border-2 border-fuchsia-500 text-fuchsia-500 font-mono uppercase tracking-wider hover:bg-fuchsia-500 hover:text-black transition-all duration-300">
      Explorar Sistema
    </a>
  </div>
  
  {/* Efecto de partículas */}
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <canvas id="matrix-bg" class="absolute inset-0 w-full h-full opacity-5"></canvas>
  </div>
</section>

{/* Script para el efecto de escritura */}
<script>
  const typingTexts = [
    'Full Stack Developer',
    'Tech Lead',
    'Product Designer',
    'Code Architect',
    'Innovation Builder'
  ];
  
  let textIndex = 0;
  let charIndex = 0;
  let isDeleting = false;
  let typingElement = document.getElementById('typing-text');
  
  function typeEffect() {
    const currentText = typingTexts[textIndex];
    
    if (isDeleting) {
      typingElement.textContent = currentText.substring(0, charIndex - 1);
      charIndex--;
    } else {
      typingElement.textContent = currentText.substring(0, charIndex + 1);
      charIndex++;
    }
    
    if (!isDeleting && charIndex === currentText.length) {
      setTimeout(() => {
        isDeleting = true;
      }, 2000);
    } else if (isDeleting && charIndex === 0) {
      isDeleting = false;
      textIndex = (textIndex + 1) % typingTexts.length;
    }
    
    const speed = isDeleting ? 50 : 100;
    setTimeout(typeEffect, speed);
  }
  
  // Iniciar el efecto de escritura
  if (typingElement) {
    setTimeout(typeEffect, 1000);
  }
  
  // Efecto Matrix
  function initMatrix() {
    const canvas = document.getElementById('matrix-bg');
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*(){}[]|<>?';
    const columns = Math.floor(canvas.width / 20);
    const drops = [];
    
    for (let i = 0; i < columns; i++) {
      drops[i] = 1;
    }
    
    function draw() {
      ctx.fillStyle = 'rgba(10, 10, 10, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      ctx.fillStyle = '#ff00ff';
      ctx.font = '16px Fira Code';
      
      for (let i = 0; i < drops.length; i++) {
        const text = characters.charAt(Math.floor(Math.random() * characters.length));
        ctx.fillText(text, i * 20, drops[i] * 20);
        
        if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i]++;
      }
    }
    
    setInterval(draw, 50);
  }
  
  // Iniciar el efecto Matrix
  if (document.readyState === 'complete') {
    initMatrix();
  } else {
    window.addEventListener('load', initMatrix);
  }
  
  // Manejar el redimensionamiento
  window.addEventListener('resize', () => {
    const canvas = document.getElementById('matrix-bg');
    if (canvas) {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
  });
</script>
